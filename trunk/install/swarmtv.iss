; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "SwarmTv"
#define MyAppVersion "0.9a"
#define MyAppPublisher "ETV"
#define MyAppURL "http://swarmtv.nl/"
#define MyAppExeName "qtswarmtv.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{510B0FBD-2145-49CB-B5B5-F164BF9A38D8}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=C:\MinGW\msys\1.0\home\JinX\swarmtv\trunk\swarmtv\license.txt
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
; Fuck anyone complaining :P
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\qtswarmtv.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\examples.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\iconv.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libcurl.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libeay32.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libgcc_s_dw2-1.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libidn-11.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libssl32.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libswarmtv.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libtvdb.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\libxml2.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\mingwm10.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\pcre.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\QtCore4.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\QtGui4.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\QtNetwork4.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\sqlite3.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\swarmtv.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\swarmtvservice.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Documents and Settings\JinX\My Documents\Downloads\swarmtv-win-alpha\zlib1.dll"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
; Filename: "{sys}\sc.exe"; Parameters: "create SwarmTv binpath= {app}\swarmtvservice.exe"; Description: "Install service"; Flags: waituntilterminated postinstall skipifsilent
; Filename: "{sys}\sc.exe"; Parameters: "config SwarmTv start= auto"; Description: "Autorun service"; Flags: waituntilterminated postinstall skipifsilent
; Filename: "{sys}\sc.exe"; Parameters: "start SwarmTv"; Description: "Start service"; Flags: waituntilterminated postinstall skipifsilent
Filename: "{app}\examples.bat"; Description: "Examples"; Flags: nowait postinstall skipifsilent
Filename: "{app}\qtswarmtv.exe"; Description: "QtSwarmTv"; Flags: nowait postinstall skipifsilent

[code]

//  Code pasted from the following address, for examples and more visit it:
//  http://www.vincenzo.net/isxkb/index.php?title=Service_-_Functions_to_Start%2C_Stop%2C_Install%2C_Remove_a_Service


// function IsServiceInstalled(ServiceName: string) : boolean;
// function IsServiceRunning(ServiceName: string) : boolean;
// function InstallService(FileName, ServiceName, DisplayName, Description : string;ServiceType,StartType :cardinal) : boolean;
// function RemoveService(ServiceName: string) : boolean;
// function StartService(ServiceName: string) : boolean;
// function StopService(ServiceName: string) : boolean;
// function SetupService(service, port, comment: string) : boolean;

type
    SERVICE_STATUS = record
        dwServiceType               : cardinal;
        dwCurrentState              : cardinal;
        dwControlsAccepted          : cardinal;
        dwWin32ExitCode             : cardinal;
        dwServiceSpecificExitCode   : cardinal;
        dwCheckPoint                : cardinal;
        dwWaitHint                  : cardinal;
    end;
    HANDLE = cardinal;

const
    SERVICE_QUERY_CONFIG        = $1;
    SERVICE_CHANGE_CONFIG       = $2;
    SERVICE_QUERY_STATUS        = $4;
    SERVICE_START               = $10;
    SERVICE_STOP                = $20;
    SERVICE_ALL_ACCESS          = $f01ff;
    SC_MANAGER_ALL_ACCESS       = $f003f;
    SERVICE_WIN32_OWN_PROCESS   = $10;
    SERVICE_WIN32_SHARE_PROCESS = $20;
    SERVICE_WIN32               = $30;
    SERVICE_INTERACTIVE_PROCESS = $100;
    SERVICE_BOOT_START          = $0;
    SERVICE_SYSTEM_START        = $1;
    SERVICE_AUTO_START          = $2;
    SERVICE_DEMAND_START        = $3;
    SERVICE_DISABLED            = $4;
    SERVICE_DELETE              = $10000;
    SERVICE_CONTROL_STOP        = $1;
    SERVICE_CONTROL_PAUSE       = $2;
    SERVICE_CONTROL_CONTINUE    = $3;
    SERVICE_CONTROL_INTERROGATE = $4;
    SERVICE_STOPPED             = $1;
    SERVICE_START_PENDING       = $2;
    SERVICE_STOP_PENDING        = $3;
    SERVICE_RUNNING             = $4;
    SERVICE_CONTINUE_PENDING    = $5;
    SERVICE_PAUSE_PENDING       = $6;
    SERVICE_PAUSED              = $7;

// #######################################################################################
// nt based service utilities
// #######################################################################################
function OpenSCManager(lpMachineName, lpDatabaseName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenSCManagerA@advapi32.dll stdcall';

function OpenService(hSCManager :HANDLE;lpServiceName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenServiceA@advapi32.dll stdcall';

function CloseServiceHandle(hSCObject :HANDLE): boolean;
external 'CloseServiceHandle@advapi32.dll stdcall';

function CreateService(hSCManager :HANDLE;lpServiceName, lpDisplayName: string;dwDesiredAccess,dwServiceType,dwStartType,dwErrorControl: cardinal;lpBinaryPathName,lpLoadOrderGroup: String; lpdwTagId : cardinal;lpDependencies,lpServiceStartName,lpPassword :string): cardinal;
external 'CreateServiceA@advapi32.dll stdcall';

function DeleteService(hService :HANDLE): boolean;
external 'DeleteService@advapi32.dll stdcall';

function StartNTService(hService :HANDLE;dwNumServiceArgs : cardinal;lpServiceArgVectors : cardinal) : boolean;
external 'StartServiceA@advapi32.dll stdcall';

function ControlService(hService :HANDLE; dwControl :cardinal;var ServiceStatus :SERVICE_STATUS) : boolean;
external 'ControlService@advapi32.dll stdcall';

function QueryServiceStatus(hService :HANDLE;var ServiceStatus :SERVICE_STATUS) : boolean;
external 'QueryServiceStatus@advapi32.dll stdcall';

function QueryServiceStatusEx(hService :HANDLE;ServiceStatus :SERVICE_STATUS) : boolean;
external 'QueryServiceStatus@advapi32.dll stdcall';

function GetLastError() : cardinal;
external 'GetLastError@kernel32.dll stdcall';

function OpenServiceManager() : HANDLE;
begin
    if UsingWinNT() = true then begin
        Result := OpenSCManager('','',SC_MANAGER_ALL_ACCESS);
        if Result = 0 then
            MsgBox('the servicemanager is not available', mbError, MB_OK)
    end
    else begin
            MsgBox('only nt based systems support services', mbError, MB_OK)
            Result := 0;
    end
end;

function IsServiceInstalled(ServiceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := OpenServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM,ServiceName,SERVICE_QUERY_CONFIG);
        if hService <> 0 then begin
            Result := true;
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end
end;

function InstallService(FileName, ServiceName, DisplayName, Description : string;ServiceType,StartType :cardinal) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := OpenServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := CreateService(hSCM,ServiceName,DisplayName,SERVICE_ALL_ACCESS,ServiceType,StartType,0,FileName,'',0,'','','');
        if hService <> 0 then begin
            Result := true;
            // Win2K & WinXP supports aditional description text for services
            if Description<> '' then
                RegWriteStringValue(HKLM,'System\CurrentControlSet\Services\' + ServiceName,'Description',Description);
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end
end;

function RemoveService(ServiceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := OpenServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM,ServiceName,SERVICE_DELETE);
        if hService <> 0 then begin
            Result := DeleteService(hService);
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end
end;

function StartService(ServiceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := OpenServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM,ServiceName,SERVICE_START);
        if hService <> 0 then begin
            Result := StartNTService(hService,0,0);
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end;
end;

function StopService(ServiceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
    Status  : SERVICE_STATUS;
begin
    hSCM := OpenServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM,ServiceName,SERVICE_STOP);
        if hService <> 0 then begin
            Result := ControlService(hService,SERVICE_CONTROL_STOP,Status);
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end;
end;

function IsServiceRunning(ServiceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
    Status  : SERVICE_STATUS;
begin
    hSCM := OpenServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM,ServiceName,SERVICE_QUERY_STATUS);
        if hService <> 0 then begin
            if QueryServiceStatus(hService,Status) then begin
                Result :=(Status.dwCurrentState = SERVICE_RUNNING)
            end;
            CloseServiceHandle(hService)
            end;
        CloseServiceHandle(hSCM)
    end
end;

function InitializeSetup(): Boolean;
 begin
	if IsServiceInstalled('SwarmTv') = true then begin
    StopService('SwarmTv');
    // make sure you can overwrite
 end
  	Result := true
end;

procedure DeinitializeSetup();
begin
	if IsServiceInstalled('SwarmTv') = false then begin
		if InstallService('c:\Program Files\SwarmTv\swarmtvservice.exe','SwarmTv','SwarmTv service','SwarmTv service is doing usefull things',SERVICE_WIN32_OWN_PROCESS,SERVICE_AUTO_START) = true then begin
			StartService('SwarmTv');
		end
	end
end;

function InitializeUninstall(): Boolean;
 begin
	if IsServiceInstalled('SwarmTv') = true then begin
    StopService('SwarmTv');
    // after stopping a service you should wait some seconds before removing
    RemoveService('SwarmTv');
    // otherwise removing can fail
	end
  	Result := true
end;